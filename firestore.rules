
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all access to prevent unintended access
    // match /{document=**} {
    //   allow read, write: if false;
    // }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read and write their own data (e.g., profile updates)
      // Disallow users from changing their own role or approval status directly.
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId; // For initial user registration
      allow update: if request.auth != null && request.auth.uid == userId &&
                       !(request.resource.data.role != resource.data.role ||
                         request.resource.data.approved != resource.data.approved ||
                         request.resource.data.active != resource.data.active ||
                         (resource.data.role == 'seller' && request.resource.data.cylindersAvailable != resource.data.cylindersAvailable && request.auth.uid != userId)); // Sellers can update their own stock

      // Admins can read, write, create, and delete any user document.
      // This covers admin operations like approving sellers, viewing details, etc.
      allow list, get, write, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Specific rule for buyers to list/read active and approved sellers (for buyer dashboard)
    // This rule is more restrictive than the admin list rule for general queries.
    // It seems the admin query for sellers also needs a broad list permission on /users.
    // The rule above for admins (`allow list`) on `/users/{userId}` (implicitly the collection if `{userId}` is a wildcard for queries) should cover this.
    // For clarity, if an admin queries sellers, the above admin rule for `list` applies.
    // For a buyer querying sellers, a more specific rule like this might be needed if not covered by admin:
    // match /users/{sellerId} where resource.data.role == 'seller' && resource.data.approved == true && resource.data.active == true {
    //   allow get, list: if request.auth != null;
    // }
    // However, for admin fetching all sellers, the admin `list` permission on the `users` collection (via `match /users/{userId}` with wildcard behavior for collection queries) is key.


    // Rules for the 'purchases' collection
    match /purchases/{purchaseId} {
      // Admins can manage all purchases
      allow read, write, create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Buyers can create their own purchases
      allow create: if request.auth != null && request.resource.data.buyerId == request.auth.uid;
      // Buyers can read their own purchases
      allow read: if request.auth != null && resource.data.buyerId == request.auth.uid;
    }
  }
}
